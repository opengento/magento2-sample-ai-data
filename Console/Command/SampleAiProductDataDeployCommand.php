<?php

namespace Opengento\SampleAiData\Console\Command;

use Magento\Framework\Console\Cli;
use Opengento\SampleAiData\Service\Generator\ProductGenerator;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Magento\Catalog\Model\ResourceModel\Category\Collection;
use Magento\Catalog\Model\ResourceModel\Category\CollectionFactory as CategoryCollectionFactory;

class SampleAiProductDataDeployCommand extends Command
{
    const KEYWORD = 'keyword';
    const MAX_PRODUCTS = 'max-products';

    const CATEGORY = 'category';
    const DESCRIPTION_LENGTH = 'description-length';

    private const WITH_CATEGORIES_OPTION = 'with-categories';

    public function __construct(
        private readonly ProductGenerator $productGenerator,
        private readonly CategoryCollectionFactory $categoryCollectionFactory
    ) {
        parent::__construct();
    }

    protected function configure()
    {
        $this->setName('sampleaidata:product')
            ->setDescription('Deploy sample data generated by AI for composer-based Magento installations')
            ->setDefinition([
                    new InputArgument(
                        self::KEYWORD,
                        InputArgument::REQUIRED,
                        'Industry domain for which to generate sample data'
                    ),
                    new InputArgument(
                        self::MAX_PRODUCTS,
                        InputArgument::REQUIRED,
                        'Number of products to generate'
                    ),
                    new InputArgument(
                        self::CATEGORY,
                        InputArgument::REQUIRED,
                        'Number of products to generate'
                    ),
                    new InputOption(
                        self::DESCRIPTION_LENGTH,
                        null,
                        InputOption::VALUE_OPTIONAL,
                        'Maximum length of product description',
                        100
                    ),
                    new InputOption(
                        self::WITH_CATEGORIES_OPTION,
                        null,
                        InputOption::VALUE_OPTIONAL,
                        'Create products for existing categories',
                        false
                    )
                ]
            );
        parent::configure();
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $keyword = $input->getArgument(self::KEYWORD);
        $maxProducts = $input->getArgument(self::MAX_PRODUCTS);
        $category = $input->getArgument(self::CATEGORY);
        $descriptionLength = $input->getOption(self::DESCRIPTION_LENGTH);
        $withCategories = $input->hasOption(self::WITH_CATEGORIES_OPTION);

        if ($withCategories) {
            $collection = $this->categoryCollectionFactory->create();

            foreach ($collection as $category) {
                $this->productGenerator->generate($keyword, $maxProducts, $descriptionLength, $category);
            }

        } else {
            $this->productGenerator->generate($keyword, $maxProducts, $descriptionLength);
        }







        return Cli::RETURN_SUCCESS;
    }
}
