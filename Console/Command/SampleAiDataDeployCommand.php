<?php

namespace Opengento\SampleAiData\Console\Command;

use Magento\Framework\Console\Cli;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class SampleAiDataDeployCommand extends Command
{
    private const KEYWORD = 'keyword';
    private const STANDARD_MAX_CATEGORIES = 3;
    private const STANDARD_MAX_PRODUCTS = 3;
    private const STANDARD_WITH_CATEGORIES_OPTION = true;

    public function __construct(

    )
    {
        parent::__construct();
    }

    protected function configure()
    {
        $this->setName('sampleaidata:deploy')
            ->setDescription('Deploy sample data generated by AI for composer-based Magento installations')
            ->setDefinition([
                new InputArgument(
                    self::KEYWORD,
                    InputArgument::REQUIRED,
                    'Industry domain for which to generate sample data'
                ),
            ]);
        parent::configure();
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $keyword = $input->getArgument(self::KEYWORD);

        $output->writeln('=== SAMPLE DATA GENERATION FOR "' . $keyword . '" ===');

        $output->writeln("1. Generate Categories...");
        $categoriesData = $this->getCategoriesCommandInput($keyword);
        $this->runCommand(SampleAiCategoryDataDeployCommand::COMMAND, $categoriesData, $output);
        $output->writeln("... Done!");

        $output->writeln("2. Generate Products...");
        $productsData = $this->getProductsCommandInput($keyword);
        $this->runCommand(SampleAiProductDataDeployCommand::COMMAND, $productsData, $output);
        $output->writeln("... Done!");

        return Cli::RETURN_SUCCESS;
    }

    private function getCategoriesCommandInput(string $keyword)
    {
        return new ArrayInput([
            SampleAiCategoryDataDeployCommand::KEYWORD => $keyword,
            SampleAiCategoryDataDeployCommand::MAX_CATEGORIES => self::STANDARD_MAX_CATEGORIES,
        ]);
    }

    private function getProductsCommandInput($keyword)
    {
        return new ArrayInput([
            SampleAiProductDataDeployCommand::KEYWORD => $keyword,
            SampleAiProductDataDeployCommand::MAX_PRODUCTS => self::STANDARD_MAX_PRODUCTS,
            '--'.SampleAiProductDataDeployCommand::WITH_CATEGORIES_OPTION => self::STANDARD_WITH_CATEGORIES_OPTION,
        ]);
    }

    private function runCommand(string $command, ArrayInput $data, OutputInterface $output)
    {
        $command = $this->getApplication()->find($command);
        return $command->run($data, $output);
    }
}
